version: '3.8'

services:
  # 5GLabX Cloud API (Log Engine)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - LOG_ENGINE_URL=http://localhost:3001
      - GLOBAL_FAULT_RATE=0.10
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-encryption-key}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - WS_HEARTBEAT_INTERVAL=30000
      - WS_CONNECTION_TIMEOUT=300000
      - MAX_CONCURRENT_EXECUTIONS=10
      - EXECUTION_TIMEOUT=300000
      - LOG_LEVEL=info
      - ENABLE_FAULT_INJECTION=true
      - ENABLE_REAL_TIME_COLLABORATION=true
      - ENABLE_ADMIN_PANEL=true
      - ENABLE_ANALYTICS=true
      - DEBUG_MODE=true
      - MOCK_DATA=true
    volumes:
      - ./api:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - redis
    networks:
      - 5glabx-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - 5glabx-network

  # PostgreSQL for local development (optional - can use Supabase instead)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=5glabx_cloud
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - 5glabx-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - 5glabx-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - 5glabx-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - 5glabx-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  5glabx-network:
    driver: bridge