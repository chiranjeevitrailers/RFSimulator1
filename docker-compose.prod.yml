version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: 5glabx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - api
      - log-engine
    restart: unless-stopped
    networks:
      - 5glabx-network

  # Frontend (Static files served by Nginx)
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.prod
    container_name: 5glabx-frontend
    volumes:
      - frontend-dist:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - 5glabx-network

  # API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.prod
    container_name: 5glabx-api
    environment:
      - NODE_ENV=production
      - PORT=3001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - LOG_ENGINE_URL=${LOG_ENGINE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - api-logs:/app/logs
    restart: unless-stopped
    networks:
      - 5glabx-network
    depends_on:
      - redis

  # Log Engine
  log-engine:
    build:
      context: ./log-engine
      dockerfile: Dockerfile.prod
    container_name: 5glabx-log-engine
    environment:
      - NODE_ENV=production
      - PORT=3002
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - REDIS_URL=${REDIS_URL}
      - GLOBAL_FAULT_RATE=${GLOBAL_FAULT_RATE}
    volumes:
      - log-engine-logs:/app/logs
      - log-engine-data:/app/data
    restart: unless-stopped
    networks:
      - 5glabx-network
    depends_on:
      - redis

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: 5glabx-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - 5glabx-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: 5glabx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - 5glabx-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: 5glabx-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - 5glabx-network
    depends_on:
      - prometheus

  # Log Aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: 5glabx-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - 5glabx-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: 5glabx-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
    ports:
      - "5044:5044"
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    restart: unless-stopped
    networks:
      - 5glabx-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: 5glabx-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    restart: unless-stopped
    networks:
      - 5glabx-network
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: 5glabx-backup
    environment:
      - PGPASSWORD=${SUPABASE_DB_PASSWORD}
    volumes:
      - backup-data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache postgresql-client &&
        chmod +x /backup.sh &&
        crond -f
      "
    restart: unless-stopped
    networks:
      - 5glabx-network

volumes:
  frontend-dist:
  api-logs:
  log-engine-logs:
  log-engine-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  backup-data:

networks:
  5glabx-network:
    driver: bridge