name: Deploy Preview

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci
          cd ../api && npm ci

      - name: Run linting
        run: |
          npm run lint
          cd web && npm run lint
          cd ../api && npm run lint

      - name: Run type checking
        run: |
          cd web && npm run type-check
          cd ../api && npm run type-check

      - name: Run tests
        run: |
          npm run test
          cd web && npm run test
          cd ../api && npm run test

      - name: Build web application
        run: |
          cd web && npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
          VITE_SITE_URL: ${{ github.event.pull_request.head.repo.html_url }}

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './web/dist'
          production-deploy: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy preview for PR #${{ github.event.pull_request.number }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ Deploy preview ready!')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: `ðŸš€ Deploy preview ready!
                
                **Preview URL:** ${{ steps.deploy.outputs.url }}
                
                This preview will be automatically updated when you push new commits to this PR.
                
                **Build Status:** âœ… Success
                **Commit:** \`${{ github.sha }}\``
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `ðŸš€ Deploy preview ready!
                
                **Preview URL:** ${{ steps.deploy.outputs.url }}
                
                This preview will be automatically updated when you push new commits to this PR.
                
                **Build Status:** âœ… Success
                **Commit:** \`${{ github.sha }}\``
              });
            }